{"Asset":[{"_id":"themes\\metro-light-master\\source\\fancybox\\blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes\\metro-light-master\\source\\fancybox\\fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes\\metro-light-master\\source\\fancybox\\fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":false},{"_id":"themes\\metro-light-master\\source\\fancybox\\fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes\\metro-light-master\\source\\fancybox\\fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes\\metro-light-master\\source\\fancybox\\fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":false},{"_id":"themes\\metro-light-master\\source\\fancybox\\jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes\\metro-light-master\\source\\fancybox\\jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes\\metro-light-master\\source\\img\\apple-icon.png","path":"img/apple-icon.png","modified":false},{"_id":"themes\\metro-light-master\\source\\img\\favicon.png","path":"img/favicon.png","modified":false},{"_id":"themes\\metro-light-master\\source\\img\\favicon.ico","path":"img/favicon.ico","modified":false},{"_id":"themes\\metro-light-master\\source\\js\\gallery.js","path":"js/gallery.js","modified":false},{"_id":"themes\\metro-light-master\\source\\js\\jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":false},{"_id":"themes\\metro-light-master\\source\\css\\style.styl","path":"css/style.styl","modified":false}],"Cache":[{"_id":"scaffolds\\draft.md","mtime":1421666426000},{"_id":"scaffolds\\page.md","mtime":1421666426000},{"_id":"scaffolds\\photo.md","mtime":1421666426000},{"_id":"scaffolds\\post.md","mtime":1421666426000},{"_id":"themes\\metro-light-master\\README.md","mtime":1415876468000},{"_id":"themes\\metro-light-master\\LICENSE","mtime":1415876468000},{"_id":"themes\\metro-light-master\\_config.yml","mtime":1421993525000},{"_id":"themes\\metro-light-master\\layout\\archive.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\category.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\index.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\layout.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\page.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\post.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\tag.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_widget\\category.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_widget\\recent_posts.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_widget\\tag.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_widget\\search.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_widget\\tagcloud.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_widget\\weibo.ejs","mtime":1421749383000},{"_id":"themes\\metro-light-master\\layout\\_partial\\after_footer.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\archive.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\article.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\comment.ejs","mtime":1421746718000},{"_id":"themes\\metro-light-master\\layout\\_partial\\facebook_comment.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\footer.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\google_analytics.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\head.ejs","mtime":1421993684000},{"_id":"themes\\metro-light-master\\layout\\_partial\\header.ejs","mtime":1421993666000},{"_id":"themes\\metro-light-master\\layout\\_partial\\page-heading.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\pagination.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\sidebar.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\post\\category.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\post\\gallery.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\post\\share.ejs","mtime":1421996444000},{"_id":"themes\\metro-light-master\\layout\\_partial\\post\\pagination.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\post\\tag.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\layout\\_partial\\post\\title.ejs","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\fancybox\\blank.gif","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\fancybox\\fancybox_loading.gif","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\fancybox\\fancybox_loading@2x.gif","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\fancybox\\fancybox_overlay.png","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\fancybox\\fancybox_sprite.png","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\fancybox\\fancybox_sprite@2x.png","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\fancybox\\jquery.fancybox.css","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\fancybox\\jquery.fancybox.pack.js","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\img\\apple-icon.png","mtime":1421747927000},{"_id":"themes\\metro-light-master\\source\\img\\favicon.png","mtime":1421747969000},{"_id":"themes\\metro-light-master\\source\\img\\favicon.ico","mtime":1421747023000},{"_id":"themes\\metro-light-master\\source\\js\\gallery.js","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\js\\jquery.imagesloaded.min.js","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\css\\style.styl","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\css\\_base\\layout.styl","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\css\\_base\\utils.styl","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\css\\_base\\variable.styl","mtime":1421739670000},{"_id":"themes\\metro-light-master\\source\\css\\_partial\\archive.styl","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\css\\_partial\\article.styl","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\css\\_partial\\comment.styl","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\css\\_partial\\footer.styl","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\css\\_partial\\header.styl","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\css\\_partial\\index.styl","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\css\\_partial\\sidebar.styl","mtime":1415876468000},{"_id":"themes\\metro-light-master\\source\\css\\_partial\\syntax.styl","mtime":1415876468000},{"_id":"themes\\metro-light-master\\languages\\de.yml","mtime":1415876468000},{"_id":"themes\\metro-light-master\\languages\\default.yml","mtime":1415876468000},{"_id":"themes\\metro-light-master\\languages\\ru.yml","mtime":1415876468000},{"_id":"themes\\metro-light-master\\languages\\zh-TW.yml","mtime":1415876468000},{"_id":"themes\\metro-light-master\\languages\\zh-CN.yml","mtime":1415876468000},{"_id":"themes\\metro-light-master\\languages\\es.yml","mtime":1415876468000},{"_id":"source\\about\\index.md","mtime":1421995976000},{"_id":"source\\_posts\\Assembly Language - Note 14.md","mtime":1421749751000},{"_id":"source\\_posts\\hello-world.md","mtime":1421749734000},{"_id":"source\\_posts\\my-new-post.md","mtime":1421749739000},{"_id":"source\\_posts\\test.md","mtime":1421749722000},{"_id":"source\\_posts\\Assembly Language - Note 14_files\\33bf0e6f39fbd9703a0895f821d76c4e.png","mtime":1421737592000},{"_id":"source\\_posts\\Assembly Language - Note 14_files\\Evernote Camera Roll 20150117 171602 [1].png","mtime":1421737592000},{"_id":"source\\_posts\\Assembly Language - Note 14_files\\Evernote Camera Roll 20150117 171602.png","mtime":1421737592000},{"_id":"source\\_posts\\Assembly Language - Note 14_files\\Image [1].png","mtime":1421737592000},{"_id":"source\\_posts\\Assembly Language - Note 14_files\\Image [2].png","mtime":1421737592000},{"_id":"source\\_posts\\Assembly Language - Note 14_files\\Image [3].png","mtime":1421737592000},{"_id":"source\\_posts\\Assembly Language - Note 14_files\\Image.png","mtime":1421737592000},{"_id":"source\\_posts\\Assembly Language - Note 14_files\\Image [5].png","mtime":1421737592000},{"_id":"source\\_posts\\Assembly Language - Note 14_files\\Image [4].png","mtime":1421737592000},{"_id":"source\\_posts\\Assembly Language - Note 14_files\\Thumbs.db","mtime":1421737602000},{"_id":"source\\_posts\\Assembly Language - Note 14_files\\汇编语言第十七章17.3例.asm","mtime":1421737592000}],"Category":[],"Page":[{"title":"About","date":1421749615000,"content":"<h2 id=\"About\"><strong>About</strong></h2>\n<hr>\n<p><style type=\"text/css\">    .key_pos{position: absolute; right: 90%; text-align: left;}    .val_pos{position: absolute; left: 13%;}    .hidden{display: none;}    .red{color: red;}    .pic_pos{float: right; position: relative; left: -20%;}    </style><br><span class=\"key_pos\">Name:</span>        <span class=\"val_pos\">    <strong>Ice He. 何志遠</strong>    &nbsp;&nbsp;    [<a href=\"#resume\" onclick=\"document.getElementById('resume').className='';\">Resume</a>]    </span>    <img src=\"http://7u2ona.com1.z0.glb.clouddn.com/aboutscut_jianqiu_team_2013_0.jpg\" class=\"pic_pos\" style=\"height: 165px; width: auto;\"><br><span class=\"key_pos\">E-mail:</span>        <span class=\"val_pos\">    <a href=\"mailto:ice_he@foxmail.com\" target=\"_blank\" rel=\"external\">ice_he@foxmail.com</a>    </span><br><span class=\"key_pos\">Work:</span>    <span class=\"val_pos\">    <a href=\"http://baike.baidu.com/link?url=JsoP2u4kIC_MCsuecjvwUbYFAywpNHA6yJrdFWz0YYzhZLzcIgTy-wygyMqrGJNMDe79zjxmOP-fe7Kh-ZsWTq\" target=\"_blank\" rel=\"external\">Sina Weibo</a>    - Peking    <span class=\"hidden\">- Mobile Weibo Server Development Engineer </span></span><br><span class=\"key_pos\">Home:</span>        <span class=\"val_pos\">    Guangzhou - China     </span>    <br><br><span class=\"key_pos\">Motto:</span>        <span class=\"val_pos\">    Less is more.    &nbsp;&nbsp;    寧靜致遠。    </span><br><span class=\"key_pos\">Tags:</span>        <span class=\"val_pos\">    coder,&nbsp;&nbsp;    zhixin,&nbsp;&nbsp;    scut,&nbsp;&nbsp;    北漂,&nbsp;&nbsp;    毽球    </span><br><br></p>\n<h4 id=\"Social_Network\"><strong>Social Network</strong></h4>\n<hr>\n<p><br><span class=\"key_pos\">Weibo:</span>    <span class=\"val_pos\">    新浪微博 - <a href=\"#\">Ice何志远</a><span id=\"another_weibo\" class=\"hidden\">、&nbsp;<a href=\"#\">华工Ice是北漂的IT民工</a></span>    </span>    <img id=\"qr_code\" src=\"http://7u2ona.com1.z0.glb.clouddn.com/aboutqr_code_2015.jpg\" class=\"pic_pos\" style=\"height: 165px; width: auto;\"><br><span class=\"key_pos\">Prev Blog:</span>            <span class=\"val_pos\">    <a href=\"#\">飘。Gone with the wind.</a>    </span><br><span class=\"key_pos\">Douban:</span>    <span class=\"val_pos\">    豆瓣 - <a href=\"http://book.douban.com/people/IceHeGZ/collect?sort=title&amp;start=0&amp;mode=list&amp;tags_sort=count\" target=\"_blank\" rel=\"external\">Read List</a> </span><br><span class=\"key_pos\">WeChat:</span>            <span class=\"val_pos\">    微信 - <a href=\"javascript:void(0);\" onclick=\"document.getElementById('qr_code_tip').className='red';\" target=\"_blank\" rel=\"external\">IceHooo</a>    <span id=\"qr_code_tip\" class=\"hidden\">&nbsp;&nbsp;<strong>Scan QR Code -&gt;</strong></span>    </span>    <span id=\"more\">    <br><br>    <span class=\"val_pos\">    <a href=\"#Social_Network\" onclick=\"document.getElementById('resume').className='';    document.getElementById('another_weibo').className='';    document.getElementById('more').className='hidden';\">Know more …</a>    <br><br>    </span></span><br><span id=\"resume\" class=\"hidden\"><br>    <span class=\"key_pos\">Githud:</span>    <span class=\"val_pos\">    <a href=\"http://github.com/IceHe\" target=\"_blank\" rel=\"external\">http://github.com/IceHe</a>    </span><br>    <span class=\"key_pos\">Zhihu:</span>    <span class=\"val_pos\">    <a href=\"http://www.zhihu.com/people/he-zhi-yuan-15\" target=\"_blank\" rel=\"external\">知乎</a>    Just read    </span><br>    <span class=\"key_pos\">Linkedin:</span>    <span class=\"val_pos\">    <a href=\"http://cn.linkedin.com/pub/%E5%BF%97%E9%81%A0-%E4%BD%95/92/91/3ba\" target=\"_blank\" rel=\"external\">領英</a>    Not used    </span><br>    <span class=\"key_pos\">Facebook:</span>    <span class=\"val_pos\">    <a href=\"https://www.facebook.com/profile.php?id=100008252804677\" target=\"_blank\" rel=\"external\">臉書</a>    Not used    </span><br>    <span class=\"key_pos\">Twitter:</span>    <span class=\"val_pos\">    <a href=\"https://twitter.com/Ice_He_atPeking\" target=\"_blank\" rel=\"external\">推特</a>    Not used    </span><br>    <span class=\"key_pos\">Renren:</span>    <span class=\"val_pos\">    <a href=\"http://www.renren.com/394254750/profile\" target=\"_blank\" rel=\"external\">人人</a>    Not used    </span>    <br><br>    <img src=\"http://7u2ona.com1.z0.glb.clouddn.com/aboutdormitory_2013.jpg\" style=\"height: 550px; width: auto;\">    &nbsp;&nbsp;    <img src=\"http://7u2ona.com1.z0.glb.clouddn.com/aboutjian_qiu_2014.jpg\" style=\"height: 550px; width: auto; float: right; position: relative; left: 0%;\"><br></span></p>\n<p><br><br><span class=\"hidden\" style=\"position: relative; left: 13%;\">    <span id=\"qr_code\">Scan to <strong>Add me on WeChat</strong>:</span><br><img src=\"http://7u2ona.com1.z0.glb.clouddn.com/aboutqr_code_2015.jpg\" style=\"height: 200px; width: 200px;\">    </span></p>\n","source":"about/index.md","raw":"title: About\ndate: 2015-01-20 18:26:55\n---\n## **About**\n---\n<style type=\"text/css\">\t.key_pos{position: absolute; right: 90%; text-align: left;}\t.val_pos{position: absolute; left: 13%;}\t.hidden{display: none;}\t.red{color: red;}\t.pic_pos{float: right; position: relative; left: -20%;}\t</style>\n<span class=\"key_pos\">Name:</span>\t\t<span class=\"val_pos\">\t**Ice He. 何志遠**\t&nbsp;&nbsp;\t[<a href=\"#resume\" onclick=\"document.getElementById('resume').className='';\">Resume</a>]\t</span>\t<img src=\"http://7u2ona.com1.z0.glb.clouddn.com/aboutscut_jianqiu_team_2013_0.jpg\" class=\"pic_pos\" style=\"height: 165px; width: auto;\" />\n<span class=\"key_pos\">E-mail:</span>\t\t<span class=\"val_pos\">\t<a href=\"mailto:ice_he@foxmail.com\">ice_he@foxmail.com</a>\t</span>\n<span class=\"key_pos\">Work:</span>\t<span class=\"val_pos\">\t[Sina Weibo](http://baike.baidu.com/link?url=JsoP2u4kIC_MCsuecjvwUbYFAywpNHA6yJrdFWz0YYzhZLzcIgTy-wygyMqrGJNMDe79zjxmOP-fe7Kh-ZsWTq)\t- Peking\t<span class=\"hidden\">- Mobile Weibo Server Development Engineer </span></span>\n<span class=\"key_pos\">Home:</span>\t\t<span class=\"val_pos\">\tGuangzhou - China \t</span>\t<br/>\n<span class=\"key_pos\">Motto:</span>\t\t<span class=\"val_pos\">\tLess is more.\t&nbsp;&nbsp;\t寧靜致遠。\t</span>\n<span class=\"key_pos\">Tags:</span>\t\t<span class=\"val_pos\">\tcoder,&nbsp;&nbsp;\tzhixin,&nbsp;&nbsp;\tscut,&nbsp;&nbsp;\t北漂,&nbsp;&nbsp;\t毽球\t</span>\n<br/>\n#### **Social Network**\n---\n<br/><span class=\"key_pos\">Weibo:</span>\t<span class=\"val_pos\">\t新浪微博 - [Ice何志远](#)<span id=\"another_weibo\" class=\"hidden\">、&nbsp;[华工Ice是北漂的IT民工](#)</span>\t</span>\t<img id=\"qr_code\" src=\"http://7u2ona.com1.z0.glb.clouddn.com/aboutqr_code_2015.jpg\" class=\"pic_pos\" style=\"height: 165px; width: auto;\" />\n<span class=\"key_pos\">Prev Blog:</span>\t\t\t<span class=\"val_pos\">\t[飘。Gone with the wind.](#)\t</span>\n<span class=\"key_pos\">Douban:</span>\t<span class=\"val_pos\">\t豆瓣 - [Read List](http://book.douban.com/people/IceHeGZ/collect?sort=title&start=0&mode=list&tags_sort=count) </span>\n<span class=\"key_pos\">WeChat:</span>\t\t\t<span class=\"val_pos\">\t微信 - <a href=\"javascript:void(0);\" onclick=\"document.getElementById('qr_code_tip').className='red';\">IceHooo</a>\t<span id=\"qr_code_tip\" class=\"hidden\">&nbsp;&nbsp;**Scan QR Code ->**</span>\t</span>\t<span id=\"more\">\t<br/><br/>\t<span class=\"val_pos\">\t<a href=\"#Social_Network\" onclick=\"document.getElementById('resume').className='';\tdocument.getElementById('another_weibo').className='';\tdocument.getElementById('more').className='hidden';\">Know more ...</a>\t<br/><br/>\t</span></span>\n<span id=\"resume\" class=\"hidden\">\n\t<span class=\"key_pos\">Githud:</span>\t<span class=\"val_pos\">\thttp://github.com/IceHe\t</span>\n\t<span class=\"key_pos\">Zhihu:</span>\t<span class=\"val_pos\">\t[知乎](http://www.zhihu.com/people/he-zhi-yuan-15)\tJust read\t</span>\n\t<span class=\"key_pos\">Linkedin:</span>\t<span class=\"val_pos\">\t[領英](http://cn.linkedin.com/pub/%E5%BF%97%E9%81%A0-%E4%BD%95/92/91/3ba)\tNot used\t</span>\n\t<span class=\"key_pos\">Facebook:</span>\t<span class=\"val_pos\">\t[臉書](https://www.facebook.com/profile.php?id=100008252804677)\tNot used\t</span>\n\t<span class=\"key_pos\">Twitter:</span>\t<span class=\"val_pos\">\t[推特](https://twitter.com/Ice_He_atPeking)\tNot used\t</span>\n\t<span class=\"key_pos\">Renren:</span>\t<span class=\"val_pos\">\t[人人](http://www.renren.com/394254750/profile)\tNot used\t</span>\t<br/>\n\t<img src=\"http://7u2ona.com1.z0.glb.clouddn.com/aboutdormitory_2013.jpg\" style=\"height: 550px; width: auto;\" />\t&nbsp;&nbsp;\t<img src=\"http://7u2ona.com1.z0.glb.clouddn.com/aboutjian_qiu_2014.jpg\" style=\"height: 550px; width: auto; float: right; position: relative; left: 0%;\" />\n</span>\n\n<br/>\n<span class=\"hidden\" style=\"position: relative; left: 13%;\">\t<span id=\"qr_code\">Scan to **Add me on WeChat**:</span>\n<img src=\"http://7u2ona.com1.z0.glb.clouddn.com/aboutqr_code_2015.jpg\" style=\"height: 200px; width: 200px;\"/>\t</span>","updated":1422001042000,"path":"about/index.html","excerpt":"","_id":"1xp2b0c6dxphc5q3","comments":true,"layout":"page"}],"Post":[{"title":"Assembly Language - Note 14","date":1421667625000,"tags":["iknwj76vmvm9sm71","gx513gufqa20k0il"],"content":"<p><html></html></p>\n<p><head><br>  <title>Evernote Export</title><br>  <basefont face=\"Tahoma\" size=\"2\"><br>  <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"><br>  <meta name=\"exporter-version\" content=\"Evernote Windows/274061; Windows/6.3.9600;\"><br>  <style><br>    body, td {<br>      font-family: Tahoma;<br>      font-size: 12pt;<br>    }<br>  </style><br></head></p>\n<p><body><br><img src=\"/img/apple-icon.png\"></body></p>\n<p><a name=\"2465\"></a></p>\n<p><div></div></p>\n<p><div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;\"><div>教材：《汇编语言》（第二版）王爽 著 清华大学出版社</div><div><br></div><div><b>章十七、使用BIOS进行键盘输入和磁盘读写</b></div><div><b><br></b></div><div>键盘输入：最基本的输入</div><div>磁盘：最常用的储存设备</div><div>BIOS：为以上两种外设<b>提供了最基本的中断例程</b></div><div><b><br></b></div><div><b><br></b></div><div>17.1 int 9 中断例程对键盘输入的处理</div><div><br></div><div>一般键盘输入，在CPU执行完int 9中断例程后，都放到键盘缓冲区中。</div><div><b>键盘缓冲区</b>有<b>16个字</b>单元，<b>可以存储15个</b>按键的<b>扫描码和对应</b>的<b>ASCII码</b>。</div><div>键盘缓冲区使用环形队列结构管理的内存区。</div><div><br></div><div>int 9 中断例程对键盘输入的处理方法：</div><div><br></div><div><br></div><div><br></div><div>17.2 使用 int 16h 中断例程读取键盘缓冲区</div><div><br></div><div>BIOS 提供了 <b>int 16h</b> 中断例程，它包<b>含功能</b>：<br><b>从键盘缓冲区中读取</b>一个键盘<b>输入</b>，功能<b>编号为0</b>。</div><div><br></div><div>（例）</div><div>mov ah, 0</div><div>int 16h</div><div>结果：(ah)=扫描码，(al)=ASCII码。</div><div>功能：</div><div>（1）检测键盘缓冲区是否有数据；</div><div>（2）没有则重复第一步</div><div>（3）读取缓冲区第一个字单元的键盘输入；</div><div>（4）将读取的扫描码送入ah，ASCII码送入al；</div><div>（5）将已读取的键盘输入从缓冲区中删除。</div><div><em>. 具体例子，请看原书P303</em></div><div><br></div><div>可见，BIOS的<b>int 9</b> 和 <b>int 16h</b>中断例程是一对<b>相互配合</b>的程序。</div><div><b>int 9</b> 向缓冲区<b>写，int 16h</b> 从缓冲区<b>读，</b>但<b>调用时机不同</b>。</div><div>int 9 在键按下时，它就写入；int 16h 则是<b>被应用程序调用</b>时，它才去读。</div><div><br></div><div><br></div><div><b>编程：</b>接收用户的键盘输入，输入r，将屏幕字符设置为红色；</div><div>          g则设为绿色； b则设为蓝色。</div><div>源码：</div><div>assume cs:code<br><br>code segment<br><br>start:<br><br>     mov ah, 0<br><br>     int 16h<br><br>    <br><b>     mov ah, 1</b><br><b>     cmp al, ‘r’<br><br>     je red<br><br>     cmp al, ‘g’<br><br>     je green<br><br>     cmp al, ‘b’<br><br>     je blue</b><br><br>     jmp short sret<br><br><b>red:<br><br>     shl ah, 1<br><br>green:<br><br>     shl ah, 1</b><br><b>blue:</b><br><br>     mov bx, 0b800h<br><br>     mov es, bx<br><br>     mov bx, 1<br><br>    <br><br>     mov cx, 2000<br><br>c0:<br><b>     and byte ptr es:[bx], 11111000b<br><br>     or es:[bx], ah</b><br><br>     inc bx<br><br>     inc bx<br><br>     loop c0<br><br>    <br><br>sret:<br><br>     mov ax, 4c00h<br><br>     int 21h<br><br>code ends<br><br>end start</div><div><br></div><div><br></div><div>17.3 字符串的输入</div><div>最基本的字符串输入程序，需具备以下功能：</div><div>（1）在输入的同时需要显示这个字符串；</div><div>（2）一般在输入回车符后，字符串输入结束；</div><div>（3）能够删除已经输入的字符。</div><div><br></div><div><b>编程：实现以上3个基本功能</b>，参数如下——</div><div>          (dh)、(dl)=字符串在屏幕上显示的行、列位置；</div><div>          ds:si指向字符串的储存空间，字符串以0为结束符。</div><div>实现思路：详看原书P304~305</div><div><br></div><div><b>处理过程</b>：</div><div>（1）调用int 16h 读取键盘输入</div><div>（2）若是字符，入栈，显示栈中所有字符；继续执行（1）；</div><div>（3）若是退格键，一个字符出栈，显示栈中所有字符；继续执行（2）；</div><div>（4）若是Enter键，向栈压入0，返回。</div><div><br></div><div>源码：</div><div>     其中子程序charstack的子程序的参数说明：</div><div>     (ah)=功能号，0表示入栈，1表示出栈，2表示显示；</div><div>     <b>ds:si</b>指向字符<b>栈空间</b>；</div><div>     入栈：(al)=入栈字符；</div><div>     出站：(al)=出栈返回的字符；</div><div>     显示：<b>(dh)、(dl)</b>=字符串在屏幕上显示的<b>行、列</b>位置。</div><div><br></div><div>assume cs:code<br><br>stack segment<br><br>     db 64 dup (0)<br><br>stack ends<br><br>code segment<br><br>start:<br><br>     mov ax, stack<br><br>     mov ds, ax<br><br>     mov si, 0     ;ds:si指向charstack的字符栈空间<br><br><br>     mov dh, 0     ;显示在第0行<br><br>     mov dl, 0     ;显示在第0列<br><br>     call getstr<br><br>    <br><br>     mov ax, 4c00h<br><br>     int 21h<br><br>    <br><br>getstr:<br><br>     push ax<br><br>getstrs:<br><b>     ;获取键盘输入<br><br>     mov ah, 0<br><br>     int 16h</b><br><br>    <br><br>     cmp al, 20h<br><br>     jb not_char     ;ASCII码小于20h，说明不是字符<br><br>    <br><b>     mov ah, 0     ;调用charstack的0号子程序<br><br>     call charstack     ;字符入栈<br><br>     mov ah, 2     ;调用charstack的2号子程序<br><br>     call charstack     ;显示栈中的字符</b><br><br>    <br><br>     jmp getstrs<br><br><br>not_char:<br><b>     cmp ah, 0eh     ;退格键的扫描码<br><br>     je backspace<br><br>     cmp ah, 1ch     ;回车键的扫描码<br><br>     je enter_btn</b><br><br>    <br><br>     jmp getstrs<br><br><br>backspace:<br><br>     mov ah, 1     ;调用charstack的1号子程序<br><br>     call charstack     ;字符出栈<br><br>     mov ah, 2     ;类同上<br><br>     call charstack     ;显示栈中的字符<br><br>    <br><br>     jmp getstrs<br><br>    <br><br>enter_btn:<br><br>     mov al, 0<br><br>     mov ah, 0<br><br>     call charstack     ;0入栈<br><br>     mov ah, 2<br><br>     call charstack     ;显示栈中字符<br><br>    <br><br>     pop ax<br><br>     ret<br><br>    <br><br><br>charstack:<br><br>     jmp short  charstart<br><b>table     dw charpush, charpop, charshow<br><br>top          dw 0     ;栈顶</b><br><br>    <br><br>charstart:<br><br>     push bx<br><br>     push dx<br><br>     push di<br><br>     push es<br><br>    <br><br>     cmp ah, 2<br><br>     ja sret<br><br>    <br><br>     mov bh, 0<br><br>     mov bl, ah<br><b>     add bx, bx</b><br><b>     jmp word ptr table[bx]</b><br><br>    <br><br>charpush:<br><b>     mov bx, top<br><br>     mov ds:[si][bx], al</b><br><b>     inc top</b><br><br>     jmp sret<br><br><br>charpop:<br><br>     cmp top, 0<br><br>     je sret<br><br>    <br><b>     dec top<br><br>     mov bx, top<br><br>     mov al, ds:[si][bx]</b><br><br>     jmp sret<br><br>    <br><br>charshow:<br><br>     mov bx, 0b800h<br><br>     mov es, bx<br><br>    <br><b>     mov ah, 0<br><br>     mov al, 160<br><br>     mul dh     ;dh：显示在第几行<br><br>     mov di, ax<br><br>    <br><br>     add dl, dl     ;dl：显示在第几列<br><br>     mov dh, 0<br><br>     add di, dx     ;di：对应的显示缓冲区的偏移量</b><br><br>    <br><br>     mov bx, 0<br><br>    <br><br>charshows:<br><br>     cmp bx, top<br><br>     jne not_empty<br><br>     mov byte ptr es:[di], ‘ ‘<br><br>     jmp sret<br><br>not_empty:<br><b>     mov al, ds:[si][bx]<br><br>     mov es:[di], al<br><br>     mov byte ptr es:[di + 2], ‘ ‘     ;设置下一个显示位为空</b><br><br>     inc bx<br><br>     inc di<br><br>     inc di<br><br>     jmp charshows<br><br><br>sret:<br><br>     pop es<br><br>     pop di<br><br>     pop dx<br><br>     pop bx<br><br>     ret<br><br>    <br><br>code ends<br><br>end start</div><div><br></div><div><a href=\"/img/Assembly Language - Note 14_files/汇编语言第十七章17.3例.asm\"><br></a><br></div><div><br></div><div><br></div><div>17.4 应用 <b>int 13h 中断例程对磁盘进行读写</b></div><div><b>以3.5英寸软盘为例讲解</b>（无法测试，只能做简单的笔记）。</div><div>3.5英寸软盘：2面  80磁道 <em> 18扇区 </em> 512字节 = 1440KB ≈ 1.44MB</div><div><br></div><div>int 13h 入口参数：</div><div>(ah)=int 13h的功能号</div><div>          2：读扇区；3：写扇区</div><div>(al)=读/写的扇区数</div><div>(ch)=磁道号</div><div>(cl)=扇区号</div><div>(dh)=磁头号（对于软盘即面号,因为一个面用一个磁头来读写）</div><div>(dl)=驱动器号     软驱从0开始，0：软驱A，1：软驱B；</div><div>                         硬盘从80h开始，80h：硬盘C，81h：硬盘D</div><div>es:bx 指向接受从扇区读入数据的内存区。</div><div><br></div><div>返回参数：</div><div>操作成功：(ah)=0，(al)=读/写的扇区数</div><div>操作失败：(ah)=出错代码</div><div><br></div><div><br></div><div><b>实验17 编写包含多个功能子程序的中断例程</b></div><div><b>以3.5英寸软盘为对象编写</b>（无法测试，只能简单描述题目）。</div><div><br></div><div><br></div><div></div><div><br></div><div><br></div><div><br></div><div><b>课程设计2</b></div><div><b>(完成并不现实：因为当前使用电脑CPU为64位，</b></div><div><br><b>     而非16位的8086CPU，即使编写的汇编程序也无法测试)</b></div><div><br></div><div></div><div><br></div><div><br></div><div><br></div></div><br>\u0000</p>\n<a id=\"more\"></a>","source":"_posts/Assembly Language - Note 14.md","raw":"title: Assembly Language - Note 14\ndate: 2015-01-19 19:40:25\ntags: [test, second_aricle]\n---\n\n<html>\n<head>\n  <title>Evernote Export</title>\n  <basefont face=\"Tahoma\" size=\"2\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n  <meta name=\"exporter-version\" content=\"Evernote Windows/274061; Windows/6.3.9600;\"/>\n  <style>\n    body, td {\n      font-family: Tahoma;\n      font-size: 12pt;\n    }\n  </style>\n</head>\n<body>\n<img src=\"/img/apple-icon.png\" />\n\n<a name=\"2465\"/>\n\n<div>\n<div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;\"><div>教材：《汇编语言》（第二版）王爽 著 清华大学出版社</div><div><br/></div><div><b>章十七、使用BIOS进行键盘输入和磁盘读写</b></div><div><b><br/></b></div><div>键盘输入：最基本的输入</div><div>磁盘：最常用的储存设备</div><div>BIOS：为以上两种外设<b>提供了最基本的中断例程</b></div><div><b><br/></b></div><div><b><br/></b></div><div>17.1 int 9 中断例程对键盘输入的处理</div><div><br/></div><div>一般键盘输入，在CPU执行完int 9中断例程后，都放到键盘缓冲区中。</div><div><b>键盘缓冲区</b>有<b>16个字</b>单元，<b>可以存储15个</b>按键的<b>扫描码和对应</b>的<b>ASCII码</b>。</div><div>键盘缓冲区使用环形队列结构管理的内存区。</div><div><br/></div><div>int 9 中断例程对键盘输入的处理方法：</div><div>\n</div><div><br/></div><div><br/></div><div>17.2 使用 int 16h 中断例程读取键盘缓冲区</div><div><br/></div><div>BIOS 提供了 <b>int 16h</b> 中断例程，它包<b>含功能</b>：<br/><b>从键盘缓冲区中读取</b>一个键盘<b>输入</b>，功能<b>编号为0</b>。</div><div><br/></div><div>（例）</div><div>mov ah, 0</div><div>int 16h</div><div>结果：(ah)=扫描码，(al)=ASCII码。</div><div>功能：</div><div>（1）检测键盘缓冲区是否有数据；</div><div>（2）没有则重复第一步</div><div>（3）读取缓冲区第一个字单元的键盘输入；</div><div>（4）将读取的扫描码送入ah，ASCII码送入al；</div><div>（5）将已读取的键盘输入从缓冲区中删除。</div><div>*. 具体例子，请看原书P303</div><div><br/></div><div>可见，BIOS的<b>int 9</b> 和 <b>int 16h</b>中断例程是一对<b>相互配合</b>的程序。</div><div><b>int 9</b> 向缓冲区<b>写，int 16h</b> 从缓冲区<b>读，</b>但<b>调用时机不同</b>。</div><div>int 9 在键按下时，它就写入；int 16h 则是<b>被应用程序调用</b>时，它才去读。</div><div><br/></div><div><br/></div><div><b>编程：</b>接收用户的键盘输入，输入r，将屏幕字符设置为红色；</div><div>          g则设为绿色； b则设为蓝色。</div><div>源码：</div><div>assume cs:code<br/>\ncode segment<br/>\nstart:<br/>\n     mov ah, 0<br/>\n     int 16h<br/>\n    <br/><b>     mov ah, 1</b><br/><b>     cmp al, 'r'<br/>\n     je red<br/>\n     cmp al, 'g'<br/>\n     je green<br/>\n     cmp al, 'b'<br/>\n     je blue</b><br/>\n     jmp short sret<br/><br/><b>red:<br/>\n     shl ah, 1<br/>\ngreen:<br/>\n     shl ah, 1</b><br/><b>blue:</b><br/>\n     mov bx, 0b800h<br/>\n     mov es, bx<br/>\n     mov bx, 1<br/>\n    <br/>\n     mov cx, 2000<br/>\nc0:<br/><b>     and byte ptr es:[bx], 11111000b<br/>\n     or es:[bx], ah</b><br/>\n     inc bx<br/>\n     inc bx<br/>\n     loop c0<br/>\n    <br/>\nsret:<br/>\n     mov ax, 4c00h<br/>\n     int 21h<br/>\ncode ends<br/>\nend start</div><div><br/></div><div><br/></div><div>17.3 字符串的输入</div><div>最基本的字符串输入程序，需具备以下功能：</div><div>（1）在输入的同时需要显示这个字符串；</div><div>（2）一般在输入回车符后，字符串输入结束；</div><div>（3）能够删除已经输入的字符。</div><div><br/></div><div><b>编程：实现以上3个基本功能</b>，参数如下——</div><div>          (dh)、(dl)=字符串在屏幕上显示的行、列位置；</div><div>          ds:si指向字符串的储存空间，字符串以0为结束符。</div><div>实现思路：详看原书P304~305</div><div><br/></div><div><b>处理过程</b>：</div><div>（1）调用int 16h 读取键盘输入</div><div>（2）若是字符，入栈，显示栈中所有字符；继续执行（1）；</div><div>（3）若是退格键，一个字符出栈，显示栈中所有字符；继续执行（2）；</div><div>（4）若是Enter键，向栈压入0，返回。</div><div><br/></div><div>源码：</div><div>     其中子程序charstack的子程序的参数说明：</div><div>     (ah)=功能号，0表示入栈，1表示出栈，2表示显示；</div><div>     <b>ds:si</b>指向字符<b>栈空间</b>；</div><div>     入栈：(al)=入栈字符；</div><div>     出站：(al)=出栈返回的字符；</div><div>     显示：<b>(dh)、(dl)</b>=字符串在屏幕上显示的<b>行、列</b>位置。</div><div><br/></div><div>assume cs:code<br/>\nstack segment<br/>\n     db 64 dup (0)<br/>\nstack ends<br/>\ncode segment<br/>\nstart:<br/>\n     mov ax, stack<br/>\n     mov ds, ax<br/>\n     mov si, 0     ;ds:si指向charstack的字符栈空间<br/><br/>\n     mov dh, 0     ;显示在第0行<br/>\n     mov dl, 0     ;显示在第0列<br/>\n     call getstr<br/>\n    <br/>\n     mov ax, 4c00h<br/>\n     int 21h<br/>\n    <br/>\ngetstr:<br/>\n     push ax<br/>\ngetstrs:<br/><b>     ;获取键盘输入<br/>\n     mov ah, 0<br/>\n     int 16h</b><br/>\n    <br/>\n     cmp al, 20h<br/>\n     jb not_char     ;ASCII码小于20h，说明不是字符<br/>\n    <br/><b>     mov ah, 0     ;调用charstack的0号子程序<br/>\n     call charstack     ;字符入栈<br/>\n     mov ah, 2     ;调用charstack的2号子程序<br/>\n     call charstack     ;显示栈中的字符</b><br/>\n    <br/>\n     jmp getstrs<br/><br/>\nnot_char:<br/><b>     cmp ah, 0eh     ;退格键的扫描码<br/>\n     je backspace<br/>\n     cmp ah, 1ch     ;回车键的扫描码<br/>\n     je enter_btn</b><br/>\n    <br/>\n     jmp getstrs<br/><br/>\nbackspace:<br/>\n     mov ah, 1     ;调用charstack的1号子程序<br/>\n     call charstack     ;字符出栈<br/>\n     mov ah, 2     ;类同上<br/>\n     call charstack     ;显示栈中的字符<br/>\n    <br/>\n     jmp getstrs<br/>\n    <br/>\nenter_btn:<br/>\n     mov al, 0<br/>\n     mov ah, 0<br/>\n     call charstack     ;0入栈<br/>\n     mov ah, 2<br/>\n     call charstack     ;显示栈中字符<br/>\n    <br/>\n     pop ax<br/>\n     ret<br/>\n    <br/><br/>\ncharstack:<br/>\n     jmp short  charstart<br/><b>table     dw charpush, charpop, charshow<br/>\ntop          dw 0     ;栈顶</b><br/>\n    <br/>\ncharstart:<br/>\n     push bx<br/>\n     push dx<br/>\n     push di<br/>\n     push es<br/>\n    <br/>\n     cmp ah, 2<br/>\n     ja sret<br/>\n    <br/>\n     mov bh, 0<br/>\n     mov bl, ah<br/><b>     add bx, bx</b><br/><b>     jmp word ptr table[bx]</b><br/>\n    <br/>\ncharpush:<br/><b>     mov bx, top<br/>\n     mov ds:[si][bx], al</b><br/><b>     inc top</b><br/>\n     jmp sret<br/><br/>\ncharpop:<br/>\n     cmp top, 0<br/>\n     je sret<br/>\n    <br/><b>     dec top<br/>\n     mov bx, top<br/>\n     mov al, ds:[si][bx]</b><br/>\n     jmp sret<br/>\n    <br/>\ncharshow:<br/>\n     mov bx, 0b800h<br/>\n     mov es, bx<br/>\n    <br/><b>     mov ah, 0<br/>\n     mov al, 160<br/>\n     mul dh     ;dh：显示在第几行<br/>\n     mov di, ax<br/>\n    <br/>\n     add dl, dl     ;dl：显示在第几列<br/>\n     mov dh, 0<br/>\n     add di, dx     ;di：对应的显示缓冲区的偏移量</b><br/>\n    <br/>\n     mov bx, 0<br/>\n    <br/>\ncharshows:<br/>\n     cmp bx, top<br/>\n     jne not_empty<br/>\n     mov byte ptr es:[di], ' '<br/>\n     jmp sret<br/>\nnot_empty:<br/><b>     mov al, ds:[si][bx]<br/>\n     mov es:[di], al<br/>\n     mov byte ptr es:[di + 2], ' '     ;设置下一个显示位为空</b><br/>\n     inc bx<br/>\n     inc di<br/>\n     inc di<br/>\n     jmp charshows<br/><br/>\nsret:<br/>\n     pop es<br/>\n     pop di<br/>\n     pop dx<br/>\n     pop bx<br/>\n     ret<br/>\n    <br/>\ncode ends<br/>\nend start</div><div><br/></div><div><a href=\"/img/Assembly Language - Note 14_files/汇编语言第十七章17.3例.asm\">\n</a><br/></div><div><br/></div><div><br/></div><div>17.4 应用 <b>int 13h 中断例程对磁盘进行读写</b></div><div><b>以3.5英寸软盘为例讲解</b>（无法测试，只能做简单的笔记）。</div><div>3.5英寸软盘：2面 * 80磁道 * 18扇区 * 512字节 = 1440KB ≈ 1.44MB</div><div><br/></div><div>int 13h 入口参数：</div><div>(ah)=int 13h的功能号</div><div>          2：读扇区；3：写扇区</div><div>(al)=读/写的扇区数</div><div>(ch)=磁道号</div><div>(cl)=扇区号</div><div>(dh)=磁头号（对于软盘即面号,因为一个面用一个磁头来读写）</div><div>(dl)=驱动器号     软驱从0开始，0：软驱A，1：软驱B；</div><div>                         硬盘从80h开始，80h：硬盘C，81h：硬盘D</div><div>es:bx 指向接受从扇区读入数据的内存区。</div><div><br/></div><div>返回参数：</div><div>操作成功：(ah)=0，(al)=读/写的扇区数</div><div>操作失败：(ah)=出错代码</div><div><br/></div><div><br/></div><div><b>实验17 编写包含多个功能子程序的中断例程</b></div><div><b>以3.5英寸软盘为对象编写</b>（无法测试，只能简单描述题目）。</div><div><br/></div><div>\n</div><div></div><div>\n</div><div><br/></div><div><br/></div><div><b>课程设计2</b></div><div><b>(完成并不现实：因为当前使用电脑CPU为64位，</b></div><div>\n<b>     而非16位的8086CPU，即使编写的汇编程序也无法测试)</b></div><div>\n</div><div></div><div><br/></div><div><br/></div><div>\n</div></div>\n</div></body></html>\u0000\n\n<!--more-->","slug":"Assembly Language - Note 14","updated":1421749751000,"excerpt":"<p><html></html></p>\n<p><head><br>  <title>Evernote Export</title><br>  <basefont face=\"Tahoma\" size=\"2\"><br>  <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"><br>  <meta name=\"exporter-version\" content=\"Evernote Windows/274061; Windows/6.3.9600;\"><br>  <style><br>    body, td {<br>      font-family: Tahoma;<br>      font-size: 12pt;<br>    }<br>  </style><br></head></p>\n<p><body><br><img src=\"/img/apple-icon.png\"></body></p>\n<p><a name=\"2465\"></a></p>\n<p><div></div></p>\n<p><div style=\"word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;\"><div>教材：《汇编语言》（第二版）王爽 著 清华大学出版社</div><div><br></div><div><b>章十七、使用BIOS进行键盘输入和磁盘读写</b></div><div><b><br></b></div><div>键盘输入：最基本的输入</div><div>磁盘：最常用的储存设备</div><div>BIOS：为以上两种外设<b>提供了最基本的中断例程</b></div><div><b><br></b></div><div><b><br></b></div><div>17.1 int 9 中断例程对键盘输入的处理</div><div><br></div><div>一般键盘输入，在CPU执行完int 9中断例程后，都放到键盘缓冲区中。</div><div><b>键盘缓冲区</b>有<b>16个字</b>单元，<b>可以存储15个</b>按键的<b>扫描码和对应</b>的<b>ASCII码</b>。</div><div>键盘缓冲区使用环形队列结构管理的内存区。</div><div><br></div><div>int 9 中断例程对键盘输入的处理方法：</div><div><br></div><div><br></div><div><br></div><div>17.2 使用 int 16h 中断例程读取键盘缓冲区</div><div><br></div><div>BIOS 提供了 <b>int 16h</b> 中断例程，它包<b>含功能</b>：<br><b>从键盘缓冲区中读取</b>一个键盘<b>输入</b>，功能<b>编号为0</b>。</div><div><br></div><div>（例）</div><div>mov ah, 0</div><div>int 16h</div><div>结果：(ah)=扫描码，(al)=ASCII码。</div><div>功能：</div><div>（1）检测键盘缓冲区是否有数据；</div><div>（2）没有则重复第一步</div><div>（3）读取缓冲区第一个字单元的键盘输入；</div><div>（4）将读取的扫描码送入ah，ASCII码送入al；</div><div>（5）将已读取的键盘输入从缓冲区中删除。</div><div><em>. 具体例子，请看原书P303</em></div><div><br></div><div>可见，BIOS的<b>int 9</b> 和 <b>int 16h</b>中断例程是一对<b>相互配合</b>的程序。</div><div><b>int 9</b> 向缓冲区<b>写，int 16h</b> 从缓冲区<b>读，</b>但<b>调用时机不同</b>。</div><div>int 9 在键按下时，它就写入；int 16h 则是<b>被应用程序调用</b>时，它才去读。</div><div><br></div><div><br></div><div><b>编程：</b>接收用户的键盘输入，输入r，将屏幕字符设置为红色；</div><div>          g则设为绿色； b则设为蓝色。</div><div>源码：</div><div>assume cs:code<br><br>code segment<br><br>start:<br><br>     mov ah, 0<br><br>     int 16h<br><br>    <br><b>     mov ah, 1</b><br><b>     cmp al, ‘r’<br><br>     je red<br><br>     cmp al, ‘g’<br><br>     je green<br><br>     cmp al, ‘b’<br><br>     je blue</b><br><br>     jmp short sret<br><br><b>red:<br><br>     shl ah, 1<br><br>green:<br><br>     shl ah, 1</b><br><b>blue:</b><br><br>     mov bx, 0b800h<br><br>     mov es, bx<br><br>     mov bx, 1<br><br>    <br><br>     mov cx, 2000<br><br>c0:<br><b>     and byte ptr es:[bx], 11111000b<br><br>     or es:[bx], ah</b><br><br>     inc bx<br><br>     inc bx<br><br>     loop c0<br><br>    <br><br>sret:<br><br>     mov ax, 4c00h<br><br>     int 21h<br><br>code ends<br><br>end start</div><div><br></div><div><br></div><div>17.3 字符串的输入</div><div>最基本的字符串输入程序，需具备以下功能：</div><div>（1）在输入的同时需要显示这个字符串；</div><div>（2）一般在输入回车符后，字符串输入结束；</div><div>（3）能够删除已经输入的字符。</div><div><br></div><div><b>编程：实现以上3个基本功能</b>，参数如下——</div><div>          (dh)、(dl)=字符串在屏幕上显示的行、列位置；</div><div>          ds:si指向字符串的储存空间，字符串以0为结束符。</div><div>实现思路：详看原书P304~305</div><div><br></div><div><b>处理过程</b>：</div><div>（1）调用int 16h 读取键盘输入</div><div>（2）若是字符，入栈，显示栈中所有字符；继续执行（1）；</div><div>（3）若是退格键，一个字符出栈，显示栈中所有字符；继续执行（2）；</div><div>（4）若是Enter键，向栈压入0，返回。</div><div><br></div><div>源码：</div><div>     其中子程序charstack的子程序的参数说明：</div><div>     (ah)=功能号，0表示入栈，1表示出栈，2表示显示；</div><div>     <b>ds:si</b>指向字符<b>栈空间</b>；</div><div>     入栈：(al)=入栈字符；</div><div>     出站：(al)=出栈返回的字符；</div><div>     显示：<b>(dh)、(dl)</b>=字符串在屏幕上显示的<b>行、列</b>位置。</div><div><br></div><div>assume cs:code<br><br>stack segment<br><br>     db 64 dup (0)<br><br>stack ends<br><br>code segment<br><br>start:<br><br>     mov ax, stack<br><br>     mov ds, ax<br><br>     mov si, 0     ;ds:si指向charstack的字符栈空间<br><br><br>     mov dh, 0     ;显示在第0行<br><br>     mov dl, 0     ;显示在第0列<br><br>     call getstr<br><br>    <br><br>     mov ax, 4c00h<br><br>     int 21h<br><br>    <br><br>getstr:<br><br>     push ax<br><br>getstrs:<br><b>     ;获取键盘输入<br><br>     mov ah, 0<br><br>     int 16h</b><br><br>    <br><br>     cmp al, 20h<br><br>     jb not_char     ;ASCII码小于20h，说明不是字符<br><br>    <br><b>     mov ah, 0     ;调用charstack的0号子程序<br><br>     call charstack     ;字符入栈<br><br>     mov ah, 2     ;调用charstack的2号子程序<br><br>     call charstack     ;显示栈中的字符</b><br><br>    <br><br>     jmp getstrs<br><br><br>not_char:<br><b>     cmp ah, 0eh     ;退格键的扫描码<br><br>     je backspace<br><br>     cmp ah, 1ch     ;回车键的扫描码<br><br>     je enter_btn</b><br><br>    <br><br>     jmp getstrs<br><br><br>backspace:<br><br>     mov ah, 1     ;调用charstack的1号子程序<br><br>     call charstack     ;字符出栈<br><br>     mov ah, 2     ;类同上<br><br>     call charstack     ;显示栈中的字符<br><br>    <br><br>     jmp getstrs<br><br>    <br><br>enter_btn:<br><br>     mov al, 0<br><br>     mov ah, 0<br><br>     call charstack     ;0入栈<br><br>     mov ah, 2<br><br>     call charstack     ;显示栈中字符<br><br>    <br><br>     pop ax<br><br>     ret<br><br>    <br><br><br>charstack:<br><br>     jmp short  charstart<br><b>table     dw charpush, charpop, charshow<br><br>top          dw 0     ;栈顶</b><br><br>    <br><br>charstart:<br><br>     push bx<br><br>     push dx<br><br>     push di<br><br>     push es<br><br>    <br><br>     cmp ah, 2<br><br>     ja sret<br><br>    <br><br>     mov bh, 0<br><br>     mov bl, ah<br><b>     add bx, bx</b><br><b>     jmp word ptr table[bx]</b><br><br>    <br><br>charpush:<br><b>     mov bx, top<br><br>     mov ds:[si][bx], al</b><br><b>     inc top</b><br><br>     jmp sret<br><br><br>charpop:<br><br>     cmp top, 0<br><br>     je sret<br><br>    <br><b>     dec top<br><br>     mov bx, top<br><br>     mov al, ds:[si][bx]</b><br><br>     jmp sret<br><br>    <br><br>charshow:<br><br>     mov bx, 0b800h<br><br>     mov es, bx<br><br>    <br><b>     mov ah, 0<br><br>     mov al, 160<br><br>     mul dh     ;dh：显示在第几行<br><br>     mov di, ax<br><br>    <br><br>     add dl, dl     ;dl：显示在第几列<br><br>     mov dh, 0<br><br>     add di, dx     ;di：对应的显示缓冲区的偏移量</b><br><br>    <br><br>     mov bx, 0<br><br>    <br><br>charshows:<br><br>     cmp bx, top<br><br>     jne not_empty<br><br>     mov byte ptr es:[di], ‘ ‘<br><br>     jmp sret<br><br>not_empty:<br><b>     mov al, ds:[si][bx]<br><br>     mov es:[di], al<br><br>     mov byte ptr es:[di + 2], ‘ ‘     ;设置下一个显示位为空</b><br><br>     inc bx<br><br>     inc di<br><br>     inc di<br><br>     jmp charshows<br><br><br>sret:<br><br>     pop es<br><br>     pop di<br><br>     pop dx<br><br>     pop bx<br><br>     ret<br><br>    <br><br>code ends<br><br>end start</div><div><br></div><div><a href=\"/img/Assembly Language - Note 14_files/汇编语言第十七章17.3例.asm\"><br></a><br></div><div><br></div><div><br></div><div>17.4 应用 <b>int 13h 中断例程对磁盘进行读写</b></div><div><b>以3.5英寸软盘为例讲解</b>（无法测试，只能做简单的笔记）。</div><div>3.5英寸软盘：2面  80磁道 <em> 18扇区 </em> 512字节 = 1440KB ≈ 1.44MB</div><div><br></div><div>int 13h 入口参数：</div><div>(ah)=int 13h的功能号</div><div>          2：读扇区；3：写扇区</div><div>(al)=读/写的扇区数</div><div>(ch)=磁道号</div><div>(cl)=扇区号</div><div>(dh)=磁头号（对于软盘即面号,因为一个面用一个磁头来读写）</div><div>(dl)=驱动器号     软驱从0开始，0：软驱A，1：软驱B；</div><div>                         硬盘从80h开始，80h：硬盘C，81h：硬盘D</div><div>es:bx 指向接受从扇区读入数据的内存区。</div><div><br></div><div>返回参数：</div><div>操作成功：(ah)=0，(al)=读/写的扇区数</div><div>操作失败：(ah)=出错代码</div><div><br></div><div><br></div><div><b>实验17 编写包含多个功能子程序的中断例程</b></div><div><b>以3.5英寸软盘为对象编写</b>（无法测试，只能简单描述题目）。</div><div><br></div><div><br></div><div></div><div><br></div><div><br></div><div><br></div><div><b>课程设计2</b></div><div><b>(完成并不现实：因为当前使用电脑CPU为64位，</b></div><div><br><b>     而非16位的8086CPU，即使编写的汇编程序也无法测试)</b></div><div><br></div><div></div><div><br></div><div><br></div><div><br></div></div><br>\u0000</p>\n","_id":"m6ppb4t2of8zsiuz","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"my new post","date":1421667625000,"tags":["iknwj76vmvm9sm71","ar3d09cnqv5nu7bc"],"content":"<p>hello<br>my first<br>page</p>\n<a id=\"more\"></a>","source":"_posts/my-new-post.md","raw":"title: my new post\ndate: 2015-01-19 19:40:25\ntags: [test, first_aricle]\n---\nhello\nmy first\npage\n\n<!--more-->","slug":"my-new-post","updated":1421749739000,"excerpt":"<p>hello<br>my first<br>page</p>\n","_id":"z436pl2e7v683geo","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"Hello World","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick_Start\">Quick Start</h2>\n<h3 id=\"Create_a_new_post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run_server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate_static_files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy_to_remote_sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n<a id=\"more\"></a>","source":"_posts/hello-world.md","raw":"title: Hello World\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n<!--more-->","slug":"hello-world","date":1421666426000,"updated":1421749734000,"excerpt":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick_Start\">Quick Start</h2>\n<h3 id=\"Create_a_new_post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run_server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate_static_files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy_to_remote_sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","_id":"fkmabqz4jho896m5","categories":[],"tags":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"test","date":1421667625000,"tags":["iknwj76vmvm9sm71","gx513gufqa20k0il"],"content":"<p><img src=\"/img/apple-icon.png\" alt=\"Alt text\">!</p>\n<p>Use the <code>printf()</code> function.</p>\n<p><em>single asterisks</em><em>single underscores</em><strong>double asterisks</strong><strong>double underscores</strong></p>\n<p>This is <a href=\"http://example .com/\" title=\"Title\" target=\"_blank\" rel=\"external\">an example</a> inline link.<a href=\"http://example .net/\" target=\"_blank\" rel=\"external\">This link</a> has no title attribute.</p>\n<p>Here is an example of AppleScript:<br>　　tell application “Foo”<br>　　beep<br>　　end tell</p>\n<hr>\n<p></p><p>这是一个普通段落：</p><p></p>\n<pre><code>\n    //这是一个代码区块。\n    assume cs:code\n    code segment\n    start:\n        ;test\n        mov ah, 3\n        mov al, 3\n        int 7ch\n\n        mov ax, 4c00h\n        int 21h\n    code ends\n    end start\n</code></pre>\n\n\n\n\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>\n</blockquote>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ul>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ul>\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<h1 id=\"This_is_an_H1\">This is an H1</h1>\n<h2 id=\"This_is_an_H2\">This is an H2</h2>\n<h1 id=\"这是_H1\">这是 H1</h1>\n<h2 id=\"这是_H2\">这是 H2</h2>\n<h6 id=\"这是_H6\">这是 H6</h6>\n<blockquote>\n<p>试试<br>哈哈<br>简直坑爹<br>开什么玩笑……</p>\n</blockquote>\n<a id=\"more\"></a>","source":"_posts/test.md","raw":"title: test\ndate: 2015-01-19 19:40:25\ntags: [test, second_aricle]\n---\n\n![Alt text](/img/apple-icon.png)!\n   \nUse the `printf()` function.\n   \n*single asterisks*_single underscores_**double asterisks**__double underscores__\n\nThis is [an example](http://example .com/ \"Title\") inline link.[This link](http://example .net/) has no title attribute.\n\nHere is an example of AppleScript:\n　　tell application \"Foo\"\n　　beep\n　　end tell\n\n---------------------------------------\n<P>这是一个普通段落：</P>\n<pre><code>\n\t//这是一个代码区块。\n\tassume cs:code\n\tcode segment\n\tstart:\n\t\t;test\n\t\tmov ah, 3\n\t\tmov al, 3\n\t\tint 7ch\n\n\t\tmov ax, 4c00h\n\t\tint 21h\n\tcode ends\n\tend start\n</code></pre>\n\n\n\n\n> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n> consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n> Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n> \n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n> id sem consectetuer libero luctus adipiscing.\n\n\n+ Red\n+ Green\n+ Blue\n\n\n* Red\n* Green\n* Blue\n\n\n1. Bird\n2. McHale\n3. Parish\n\n\nThis is an H1\n=============\nThis is an H2\n-------------\n\n\n# 这是 H1\n## 这是 H2\n###### 这是 H6\n\n\n> 试试\n> 哈哈\n> 简直坑爹\n> 开什么玩笑……\n\n<!--more-->","slug":"test","updated":1421749722000,"excerpt":"<p><img src=\"/img/apple-icon.png\" alt=\"Alt text\">!</p>\n<p>Use the <code>printf()</code> function.</p>\n<p><em>single asterisks</em><em>single underscores</em><strong>double asterisks</strong><strong>double underscores</strong></p>\n<p>This is <a href=\"http://example .com/\" title=\"Title\" target=\"_blank\" rel=\"external\">an example</a> inline link.<a href=\"http://example .net/\" target=\"_blank\" rel=\"external\">This link</a> has no title attribute.</p>\n<p>Here is an example of AppleScript:<br>　　tell application “Foo”<br>　　beep<br>　　end tell</p>\n<hr>\n<p></p><p>这是一个普通段落：</p><p></p>\n<pre><code>\n    //这是一个代码区块。\n    assume cs:code\n    code segment\n    start:\n        ;test\n        mov ah, 3\n        mov al, 3\n        int 7ch\n\n        mov ax, 4c00h\n        int 21h\n    code ends\n    end start\n</code></pre>\n\n\n\n\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>\n</blockquote>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ul>\n<ul>\n<li>Red</li>\n<li>Green</li>\n<li>Blue</li>\n</ul>\n<ol>\n<li>Bird</li>\n<li>McHale</li>\n<li>Parish</li>\n</ol>\n<h1 id=\"This_is_an_H1\">This is an H1</h1>\n<h2 id=\"This_is_an_H2\">This is an H2</h2>\n<h1 id=\"这是_H1\">这是 H1</h1>\n<h2 id=\"这是_H2\">这是 H2</h2>\n<h6 id=\"这是_H6\">这是 H6</h6>\n<blockquote>\n<p>试试<br>哈哈<br>简直坑爹<br>开什么玩笑……</p>\n</blockquote>\n","_id":"y8iwgii2l3c1g0ys","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"test","_id":"iknwj76vmvm9sm71","posts":["m6ppb4t2of8zsiuz","z436pl2e7v683geo","y8iwgii2l3c1g0ys"]},{"name":"second_aricle","_id":"gx513gufqa20k0il","posts":["m6ppb4t2of8zsiuz","y8iwgii2l3c1g0ys"]},{"name":"first_aricle","_id":"ar3d09cnqv5nu7bc","posts":["z436pl2e7v683geo"]}]}